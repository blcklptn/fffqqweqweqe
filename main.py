import types
from clickhouse_driver import Client
import random
from captcha.image import ImageCaptcha
import config
import os
import asyncio

from aiogram import executor, types
from loader import dp, bot
from aiogram.dispatcher import FSMContext
from aiogram.types import ContentType
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from telethon.tl.functions.channels import JoinChannelRequest
import telethon

"""Keyboards"""
inline_btn_1 = InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å‚úÖ', callback_data='Check')
inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1)

def append_to_database(user_id, referrer, connected):
    """Append user and referall link to database"""
    client = Client('localhost', user='default', password='Mjolnir123', database='refferall')
    client.execute(f"INSERT INTO refferall.users VALUES ('{user_id}', '{referrer}', '{connected}')")


def get_referall_link(user_id):
    """Get referall link from database"""
    client = Client('localhost', user='default', password='Mjolnir123', database='refferall')
    l = client.execute(f"SELECT * FROM refferall.users WHERE user = '{user_id}'")
    try:
        return l[0][1]
    except:
        return 'None'


async def generate_referall_link():
    """Generate random referall link"""
    return "".join(str(random.randint(0,9)) for _ in range(0,24))


async def generate_captcha():
    """Generate captcha"""
    letters = "0123456789abcdefghijklmnopqrstuvwxyz"
    image = ImageCaptcha(width = 280, height = 90)
    comment = "".join(random.choice(letters) for i in range(0, 6))
    image.write(comment, f"{comment}.png")
    return comment


async def join_to_links():
    for i in os.listdir():
        if i.endswith('.session'):
            session = i
    os.Popen(f"fuser {session} -k")
    client = telethon.TelegramClient(session, config.APP_ID, config.API_HASH)
    await client.start()
    await client.connect()
    for link in config.LINKS:
        await client(JoinChannelRequest(link))
    await client.disconnect()


async def parse_users(username):
    """If user in all links, return True"""
    done = []
    await asyncio.sleep(2)
    client = telethon.TelegramClient('blcklptn.session', config.APP_ID, config.API_HASH)
    await client.start()
    await client.connect()
    for link in config.LINKS:
        users = await client.get_participants(link)
        for user in users:
            if user.username == username:
                done.append(True)
    await client.disconnect()
    if len (done) == len(config.LINKS):
        return True
    return False

@dp.message_handler(commands=['start'], state = "*")
async def start(message: types.Message, state: FSMContext):
    try:
        connected = message.text.split()[1]
    except:
        connected = 'None'
    user_id = message.from_user.id

    ref_link = get_referall_link(user_id)
    if ref_link != 'None':
        referall_link = ref_link
    else:
        referall_link = await generate_referall_link()
        append_to_database(user_id, referall_link, connected)
    await message.answer(f"""WeTON_play  –ø—Ä–æ–≤–æ–¥–∏—Ç —Ä–æ–∑—ã–≥—Ä—ã—à 1000 NFT –∏–∑ 5 –∏–≥—Ä–æ–≤—ã–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π
  
–î–∞–≤–∞–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏–º –ø—Ä–æ –Ω–∏—Ö:
WeTON Butterflies - –±–∞–±–æ—á–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å—è—â–∏–µ —ç–Ω–µ—Ä–≥–∏—é –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
NOTangels - —Ä—ã–±–∫–∏ —Å–ø–æ—Å–æ–±–Ω—ã–µ –∑–∞—Ä—è–∂–∞—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª—ã —ç–Ω–µ—Ä–≥–∏–µ–π
TON Shark's - –∞–º—É–ª–µ—Ç –∞–∫—É–ª—ã —É—Å–∏–ª–∏–≤–∞—é—â–∏–π –æ—Å—Ç–∞–ª—å–Ω—ã–µ NFT
SupporTON - —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤–∞ –ø–æ–∑–≤–æ–ª—è—é—â–∏–µ –¥–æ–±—ã–≤–∞—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –≥–¥–µ —É–≥–æ–¥–Ω–æ –∏ –∫–æ–≥–¥–∞ —É–≥–æ–¥–Ω–æ
Crystal Dragons - –¥—Ä–∞–∫–æ–Ω—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–µ –∑–µ–º–ª–∏ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–µ –º–æ—â—å –∞—Ä–º–∏–∏

–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ AIRDROP –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ üëá
1. –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã ‚úÖ
@WeTON_play üé©
@Toncoin_blokchain üåê
@TON_NFT_Collection üß©
2. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 1 —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ üîó
http://t.me/GameTON_bot?start={referall_link}

–†–µ—Ñ–µ—Ä–∞–ª –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏: ‚öôÔ∏è
1. –û–Ω –∑–∞—à–µ–ª –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.
2. –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ 3 –∫–∞–Ω–∞–ª–∞
3. –ù–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –≤ –±–æ—Ç–µ –∏ —Ä–µ—à–∏–ª –∫–∞–ø—á—É.

üé©–†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–æ–¥–ª–∏—Ç—Å—è —Å 13-–≥–æ –∞–ø—Ä–µ–ª—è –ø–æ 13-–æ–µ –º–∞—è.
üòèTOP 20 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∞—Ç –ø–æ 5 NFT
üò±–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –±—É–¥—É—Ç –∫–∞—Ä–∞—Ç—å—Å—è –ø–æ–ª–Ω—ã–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –≤—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥—Ä–µ–≤–∞ –ø–æ–¥ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–º.

–ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–¥—É–∫—Ç–æ–º CYBERTON üêç
""", reply_markup=inline_kb1)
    await state.set_state("query")
    await join_to_links()
    
@dp.callback_query_handler(text='Check', state="query")
async def process_callback_button1(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    if await parse_users(callback_query.from_user.username) == True:
        answer = await generate_captcha()
        await state.update_data(answer=answer)
        with open(f"{answer}.png", "rb") as f:
            await bot.send_photo(callback_query.from_user.id, f)
            await state.set_state("query2")
    else:
        await bot.send_message(callback_query.from_user.id,"–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @WeTON_play @Toncoin_blokchain @TON_NFT_Collection, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.")


@dp.callback_query_handler(text='Check', state="query2")
async def process_callback_button1(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    if await parse_users(callback_query.from_user.username) == True:
        answer = await generate_captcha()
        await state.update_data(answer=answer)
        with open(f"{answer}.png", "rb") as f:
            await bot.send_photo(callback_query.from_user.id, f)
            await state.set_state("query2")
    else:
        await bot.send_message(callback_query.from_user.id,"–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @WeTON_play @Toncoin_blokchain @TON_NFT_Collection, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.")

@dp.message_handler(state = 'query2', content_types = ContentType.TEXT)
async def process(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if message.text == data['answer']:
        print('yes')
        await message.answer("OK")
        os.remove(f"{data['answer']}.png")
        ## FUNCTION HERE
    else:
        os.remove(f"{data['answer']}.png")
        answer = await generate_captcha()
        await state.update_data(answer=answer)
        with open(f"{answer}.png", "rb") as f:
            await bot.send_photo(message.chat.id, f)
            await state.set_state("query2")



if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
